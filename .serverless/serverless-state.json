{
  "service": {
    "service": "weather",
    "serviceObject": {
      "name": "weather"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "eu-central-1",
      "timeout": 30,
      "environment": {
        "MONGODB_USER": "weatherdata",
        "MONGODB_PASS": "7Q8MOJhGqFdx7kJg",
        "MONGODB_HOST": "cluster0.gzhlg.mongodb.net",
        "MONGODB_DB": "weather-dev",
        "CURRENT_WEATHER_API_KEY": "93d280016c8c47a1a7c161822203011"
      },
      "stage": "dev",
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CurrentWeatherLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/weather-dev-currentWeather"
            }
          },
          "MonthlyAverageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/weather-dev-monthlyAverage"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": ["lambda.amazonaws.com"]
                    },
                    "Action": ["sts:AssumeRole"]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": ["-", ["weather", "dev", "lambda"]]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": ["logs:CreateLogStream", "logs:CreateLogGroup"],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/weather-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": ["logs:PutLogEvents"],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/weather-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "weather",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CurrentWeatherLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/weather/dev/1607091810296-2020-12-04T14:23:30.296Z/weather.zip"
              },
              "FunctionName": "weather-dev-currentWeather",
              "Handler": "controller/currentWeather.index",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGODB_USER": "weatherdata",
                  "MONGODB_PASS": "7Q8MOJhGqFdx7kJg",
                  "MONGODB_HOST": "cluster0.gzhlg.mongodb.net",
                  "MONGODB_DB": "weather-dev",
                  "CURRENT_WEATHER_API_KEY": "93d280016c8c47a1a7c161822203011"
                }
              }
            },
            "DependsOn": ["CurrentWeatherLogGroup"]
          },
          "CurrentWeatherLambdaVersionRcNsvgKKIgg4AZp7eF0uZU1Qf4HAFsSQ0danQoiwo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CurrentWeatherLambdaFunction"
              },
              "CodeSha256": "iprXBQ9h2eOKcXDkls+ud7qnihhKSu8ttdKeijJe8jo="
            }
          },
          "MonthlyAverageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/weather/dev/1607091810296-2020-12-04T14:23:30.296Z/weather.zip"
              },
              "FunctionName": "weather-dev-monthlyAverage",
              "Handler": "controller/monthlyAverage.index",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGODB_USER": "weatherdata",
                  "MONGODB_PASS": "7Q8MOJhGqFdx7kJg",
                  "MONGODB_HOST": "cluster0.gzhlg.mongodb.net",
                  "MONGODB_DB": "weather-dev",
                  "CURRENT_WEATHER_API_KEY": "93d280016c8c47a1a7c161822203011"
                }
              }
            },
            "DependsOn": ["MonthlyAverageLogGroup"]
          },
          "MonthlyAverageLambdaVersionn4gENWonuSouUWwmo0OHIhjxtEmkLCvoNMnvMl3EQc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MonthlyAverageLambdaFunction"
              },
              "CodeSha256": "iprXBQ9h2eOKcXDkls+ud7qnihhKSu8ttdKeijJe8jo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-weather",
              "EndpointConfiguration": {
                "Types": ["EDGE"]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceCurrent": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
              },
              "PathPart": "current",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCurrentLocationVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCurrent"
              },
              "PathPart": "{location}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMonthly": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
              },
              "PathPart": "monthly",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMonthlyMonthVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMonthly"
              },
              "PathPart": "{month}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMonthlyMonthVarCountryVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMonthlyMonthVar"
              },
              "PathPart": "{country}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMonthlyMonthVarCountryVarCityVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMonthlyMonthVarCountryVar"
              },
              "PathPart": "{city}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCurrentLocationVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCurrentLocationVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": ["CurrentWeatherLambdaFunction", "Arn"]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodMonthlyMonthVarCountryVarCityVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMonthlyMonthVarCountryVarCityVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": ["MonthlyAverageLambdaFunction", "Arn"]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1607091806176": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodCurrentLocationVarGet",
              "ApiGatewayMethodMonthlyMonthVarCountryVarCityVarGet"
            ]
          },
          "CurrentWeatherLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": ["CurrentWeatherLambdaFunction", "Arn"]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MonthlyAverageLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": ["MonthlyAverageLambdaFunction", "Arn"]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "CurrentWeatherLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CurrentWeatherLambdaVersionRcNsvgKKIgg4AZp7eF0uZU1Qf4HAFsSQ0danQoiwo"
            }
          },
          "MonthlyAverageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MonthlyAverageLambdaVersionn4gENWonuSouUWwmo0OHIhjxtEmkLCvoNMnvMl3EQc"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "db_user": {
        "dev": "weatherdata",
        "prod": "weatherdata"
      },
      "db_pass": {
        "dev": "7Q8MOJhGqFdx7kJg",
        "prod": "7Q8MOJhGqFdx7kJg"
      },
      "db_host": {
        "dev": "cluster0.gzhlg.mongodb.net",
        "prod": "cluster0.gzhlg.mongodb.net"
      },
      "db_name": {
        "dev": "weather-dev",
        "prod": "weather-prod"
      },
      "api_key": {
        "dev": "93d280016c8c47a1a7c161822203011",
        "prod": "93d280016c8c47a1a7c161822203011"
      }
    },
    "pluginsData": {},
    "functions": {
      "currentWeather": {
        "handler": "controller/currentWeather.index",
        "events": [
          {
            "http": {
              "path": "current/{location}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "weather-dev-currentWeather",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CurrentWeatherLambdaVersionRcNsvgKKIgg4AZp7eF0uZU1Qf4HAFsSQ0danQoiwo"
      },
      "monthlyAverage": {
        "handler": "controller/monthlyAverage.index",
        "events": [
          {
            "http": {
              "path": "monthly/{month}/{country}/{city}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "weather-dev-monthlyAverage",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "MonthlyAverageLambdaVersionn4gENWonuSouUWwmo0OHIhjxtEmkLCvoNMnvMl3EQc"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/adil/mongodb/weather/.serverless/weather.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/weather/dev/1607091810296-2020-12-04T14:23:30.296Z",
    "artifact": "weather.zip"
  }
}
